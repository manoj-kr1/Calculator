<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Simple Calculator</title>
<style>
  :root{
    --bg:#0f1720; --panel:#111827; --btn:#1f2937; --accent:#10b981; --text:#e6eef6;
    --btn-hover:#374151;
    font-family: Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  }
  html,body{height:100%;margin:0;background:linear-gradient(180deg,#071021 0%, #0b1530 100%);color:var(--text)}
  .wrap{min-height:100vh;display:flex;align-items:center;justify-content:center;padding:24px}
  .calc{width:100%;max-width:420px;background:linear-gradient(180deg,var(--panel),#0b1220);border-radius:14px;padding:18px;box-shadow:0 10px 30px rgba(2,6,23,.6)}
  .display{background:rgba(255,255,255,.02);padding:18px;border-radius:10px;min-height:68px;display:flex;flex-direction:column;justify-content:center;align-items:flex-end;}
  .expr{font-size:14px;opacity:.6;word-break:break-all}
  .result{font-size:32px;margin-top:4px;font-weight:600}
  .keys{display:grid;grid-template-columns:repeat(4,1fr);gap:10px;margin-top:14px}
  button{background:var(--btn);border:0;padding:16px;border-radius:8px;color:var(--text);font-size:18px;cursor:pointer;box-shadow:0 4px 8px rgba(2,6,23,.4)}
  button:hover{background:var(--btn-hover)}
  .op{background:rgba(16,185,129,.12);color:var(--accent)}
  .wide{grid-column:span 2}
  .danger{background:rgba(220,38,38,.12);color:#fb7185}
  @media (max-width:420px){ .result{font-size:28px} button{padding:12px;font-size:16px} }
</style>
</head>
<body>
<div class="wrap">
  <div class="calc" role="application" aria-label="Calculator">
    <div class="display" id="display">
      <div class="expr" id="expr"></div>
      <div class="result" id="result">0</div>
    </div>
    <div class="keys" id="keys">
      <button class="danger" data-action="clear">C</button>
      <button data-action="back">⌫</button>
      <button data-action="percent">%</button>
      <button class="op" data-value="/">÷</button>

      <button data-value="7">7</button>
      <button data-value="8">8</button>
      <button data-value="9">9</button>
      <button class="op" data-value="*">×</button>

      <button data-value="4">4</button>
      <button data-value="5">5</button>
      <button data-value="6">6</button>
      <button class="op" data-value="-">−</button>

      <button data-value="1">1</button>
      <button data-value="2">2</button>
      <button data-value="3">3</button>
      <button class="op" data-value="+">+</button>

      <button class="wide" data-value="0">0</button>
      <button data-value=".">.</button>
      <button class="op" data-action="equals">=</button>
    </div>
  </div>
</div>

<script>
(function(){
  const exprEl = document.getElementById('expr');
  const resultEl = document.getElementById('result');
  const keys = document.getElementById('keys');

  let expression = '';

  function sanitizeExpressionForEval(e){
    // Replace typographic operators with JS symbols
    return e.replace(/÷/g, '/').replace(/×/g, '*').replace(/−/g, '-').replace(/%/g, '/100');
  }

  function updateDisplay(){
    exprEl.textContent = expression || '';
    try {
      const sanitized = sanitizeExpressionForEval(expression);
      // evaluate safely: allow digits, operators, parentheses, decimal
      if (/^[0-9+\-*/().\s%]+$/.test(expression) && sanitized.trim() !== '') {
        const value = Function('"use strict";return (' + sanitized + ')')();
        if (Number.isFinite(value)) {
          resultEl.textContent = String(Math.round((value + Number.EPSILON) * 1e12) / 1e12);
        } else {
          resultEl.textContent = 'Error';
        }
      } else {
        resultEl.textContent = expression ? '' : '0';
      }
    } catch (err) {
      resultEl.textContent = '';
    }
  }

  function append(v){
    expression += v;
    updateDisplay();
  }

  function doBack(){
    expression = expression.slice(0,-1);
    updateDisplay();
  }

  function doClear(){
    expression = '';
    updateDisplay();
  }

  function doPercent(){
    // simple percent: treat as /100 appended
    expression += '%';
    updateDisplay();
  }

  function doEquals(){
    try {
      const sanitized = sanitizeExpressionForEval(expression);
      const value = Function('"use strict";return (' + sanitized + ')')();
      if (!Number.isFinite(value)) { resultEl.textContent = 'Error'; return; }
      expression = String(Math.round((value + Number.EPSILON) * 1e12) / 1e12);
      updateDisplay();
    } catch(e){
      resultEl.textContent = 'Error';
    }
  }

  keys.addEventListener('click', (ev) => {
    const btn = ev.target.closest('button');
    if (!btn) return;
    const val = btn.dataset.value;
    const action = btn.dataset.action;
    if (action === 'clear') return doClear();
    if (action === 'back') return doBack();
    if (action === 'percent') return doPercent();
    if (action === 'equals') return doEquals();
    if (val) append(val);
  });

  // Keyboard support
  window.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') { e.preventDefault(); doEquals(); return; }
    if (e.key === 'Backspace') { e.preventDefault(); doBack(); return; }
    if (e.key === 'Escape') { e.preventDefault(); doClear(); return; }
    const allowed = '0123456789+-*/().%';
    if (allowed.includes(e.key)) {
      append(e.key);
    }
  });

  updateDisplay();
})();
</script>
</body>
</html>
